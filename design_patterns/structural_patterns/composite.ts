/*

üß† What is the Composite Pattern?

The Composite Pattern allows you to compose objects into tree-like structures to represent part-whole hierarchies.
It lets clients treat individual objects and compositions of objects the same way.


üí° Real-world Analogy

Imagine your computer‚Äôs file system:

A file is a leaf ‚Äî it has no children.

A folder can contain files and other folders.

Yet, you can call the same operation (open(), showDetails(), etc.) on both files and folders ‚Äî this is the Composite pattern.

üß© When to Use It

‚úÖ You want to represent part-whole hierarchies.
‚úÖ You want clients to treat individual objects and compositions uniformly.
‚úÖ Common use cases include file systems, UI hierarchies, and organization charts.

Component (interface)
‚îú‚îÄ‚îÄ Leaf (single object)
‚îî‚îÄ‚îÄ Composite (collection of components)

*/

// 1Ô∏è‚É£ Component interface
interface FileSystemItem {
  getName(): string
  showDetails(indent?: string): void
}

// 2Ô∏è‚É£ Leaf: File
class SystemFile implements FileSystemItem {
  constructor(private name: string) {}

  getName(): string {
    return this.name
  }

  showDetails(indent: string = ''): void {
    console.log(`${indent}- File: ${this.name}`)
  }
}

// 3Ô∏è‚É£ Composite: Folder
class Folder implements FileSystemItem {
  private children: FileSystemItem[] = []

  constructor(private name: string) {}

  add(item: FileSystemItem): void {
    this.children.push(item)
  }

  remove(item: FileSystemItem): void {
    this.children = this.children.filter(child => child !== item)
  }

  getName(): string {
    return this.name
  }

  showDetails(indent: string = ''): void {
    console.log(`${indent}+ Folder: ${this.name}`)
    this.children.forEach(child => child.showDetails(indent + '   '))
  }
}

// 4Ô∏è‚É£ Client Code
const root = new Folder('root')
const images = new Folder('images')
const videos = new Folder('videos')

const file1 = new SystemFile('logo.png')
const file2 = new SystemFile('banner.jpg')
const file3 = new SystemFile('intro.mp4')

images.add(file1)
images.add(file2)
videos.add(file3)

root.add(images)
root.add(videos)

// Display structure
root.showDetails()
